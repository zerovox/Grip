[
    {
        "name"      : "Getting Started",
        "category"  : "Basics",
        "editors"   : [{
                "name"  : "successor",
                "map"   : { "inputs" : { "argument" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "argument" : 0 }, "output" : 1, "readonly" : true },
                    { "inputs" : { "argument" : 1 }, "readonly" : true, "output" : 2 },
                    { "inputs" : { "argument" : -1 }, "readonly" : true, "output" : 0 }
                ],
                "info"  : "First, you are going to write a really simple function that takes a number and adds one to it. In programming, we refer to this as the successor function, as on integers, it simply returns the next integer in sequence. To do this, make sure you have the 'Mathematical' functions selected below, and then click on the grey box with the label 'plus' in the function list. This will create a plus function on the function editor above which you can drag around. You'll then need to create a number in a similar way. A number is just a function that always retuns the same value, and you'll be asked to se a value for it. Type in 1 and click 'Ok'. You can now link the input to the function to the plus by clicking on the input and then clicking on one of the two inputs to the plus. You can now do the same for the number 1, and finally link the output of the plus to the output of the function. Once you've written the function, be sure to run all the tests by clicking on Run above. Once the tests all pass, fell free to move on to the next task, or try out the debug mode which you can access through the Run button above."
            }, {
                "name"  : "predecessor",
                "map"   : { "inputs" : { "argument" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "argument" : 0 }, "readonly" : true, "output" : -1 },
                    { "inputs" : { "argument" : 1 }, "readonly" : true, "output" : 0 },
                    { "inputs" : { "argument" : 1 }, "readonly" : true, "output" : 0 }
                ],
                "info"  : "What was the point to the previous exercise? As you saw, incrementing a number took two functions. If you click Local Functions in the function list below, you should see we now have successor available to us. This means every time we want to add one to a number, we can just use the function we just created instead, and recreating the same code. This is called abstraction, where we take a commonly used idea, and abstract the implementation away. For this task, write a function that decreases a numbers value by one. The definition should be very similar to the previous one. Make sure you run the tests to continue to the next exercise."
            }, {
                "name"  : "is zero",
                "map"   : { "inputs" : { "argument" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "argument" : 0 }, "readonly" : true, "output" : true },
                    { "inputs" : { "argument" : 1 }, "readonly" : true, "output" : false },
                    { "inputs" : { "argument" : -1 }, "readonly" : true, "output" : false }
                ],
                "info"  : "Now write another very simple function to test if an number is equal to zero. You should only need one function and one number for this, don't over think it! Up till now, we have only used numbers. This function produces a logical value, either a true or a false. In programming, these are known as Boolean values. You'll notice the colour of this function output is a light orange, corresponding to the Boolean type."
            }, {
                "name"  : "tax",
                "map"   : { "inputs" : { "cost" : {}, "tx" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "cost" : 16, "tx" : 0 }, "readonly" : true, "output" : 16 },
                    { "inputs" : { "cost" : 20, "tx" : 0.1 }, "readonly" : true, "output" : 22 },
                    { "inputs" : { "cost" : 700, "tx" : 0.175 }, "readonly" : true, "output" : 822.5 }
                ],
                "info"  : "Imagine you're writing the software behind a online shop and you need to calculate the total of an order after tax has been applied. There are two inputs to this calculation, 'cost' which will contain the cost of items and 'tx' which will contain a decimal such as 0.25 meaning the rate of tax is 25%. Write a function to output the total cost after tax. "
            }],
        "functions" : [ "number", "multiply", "equals", "minus", "plus" ]
    }, {
        "name"      : "Composition",
        "category"  : "Basics",
        "editors"   : [{
                "name"  : "or",
                "map"   : { "inputs" : { "a" : {}, "b" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false, "b" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : false, "b" : true}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : true, "b" : true}, "readonly" : true, "output" : true }
                ],
                "info"  : "As we saw in the last exercise, we can create more complicated functions by chaining together multiple simple functions. This is called composition of functions. We can use this in conjuction with abstraction to describe some complicated functions in terms of simple building blocks. We're going to start off by defining some simple logical functions, and build up to something more complicated. To start with, describe an or function, that returns true only if one(or more!) of the inputs is true. You should only need one function!"
            }, {
                "name"  : "and",
                "map"   : { "inputs" : { "a" : {}, "b" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false, "b" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : false, "b" : true}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : true}, "readonly" : true, "output" : true }
                ],
                "info"  : "Very similar to the previous exercise, define a function that returns true only if both a and b are true."
            }, {
                "name"  : "4-and",
                "map"   : { "inputs" : { "a" : {}, "b" : {}, "c" : {}, "d" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false, "b" : false, "c" : false, "d" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : false, "b" : false, "c" : true, "d" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false, "c" : true, "d" : true}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false, "c" : false, "d" : true}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : true, "c" : true, "d" : true}, "readonly" : true, "output" : true }
                ],
                "info"  : "Now we can build more complicated functions like a 4-way and function. See if you can solve this in two different ways, once using the and functions you described earlier, and then replacing each and with the same implementation you defined it with. Which function is easier to understand?"
            }, {
                "name"  : "not",
                "map"   : { "inputs" : { "a" : {}}, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : true}, "readonly" : true, "output" : false }
                ],
                "info"  : "We'll keep building up our logical function toolbox, this time defining the very simple function 'not', which returns the opposite of the input. You might find it interesting that this appears slightly more complicated than the definition for both 'and' and 'or'. The smallest function that computes 'not' is one function larger than the smallest definition for both 'and' and 'or'. What is interesting about the 'not' function that yields this property?"
            }, {
                "name"  : "xor",
                "map"   : { "inputs" : { "a" : {}, "b" : {} }, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false, "b" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : false, "b" : true}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : true, "b" : true}, "readonly" : true, "output" : false }
                ],
                "info"  : "Now we want to define a function called 'exclusive or', or 'xor' for short. This returns true if exactly one of the two inputs is true. "
            }, {
                "name"  : "3-even",
                "map"   : { "inputs" : { "a" : {}, "b" : {}, "c" : {}}, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false, "b" : false, "c" : false}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : false, "b" : false, "c" : true}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : false, "b" : true, "c" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false, "c" : true}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : true, "b" : true, "c" : true}, "readonly" : true, "output" : false }
                ],
                "info"  : "Next see if you can define a function that returns true if an even number of inputs its three inputs is true. Try to use the 'xor' function we defined in the previous exercise."
            }, {
                "name"  : "4-even",
                "map"   : { "inputs" : { "a" : {}, "b" : {}, "c" : {}, "d" : {}}, "functions" : { } },
                "tests" : [
                    { "inputs" : { "a" : false, "b" : false, "c" : false, "d" : false}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : false, "b" : false, "c" : true, "d" : true}, "readonly" : true, "output" : true },
                    { "inputs" : { "a" : false, "b" : true, "c" : false, "d" : false}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : false, "c" : true, "d" : true}, "readonly" : true, "output" : false },
                    { "inputs" : { "a" : true, "b" : true, "c" : true, "d" : true}, "readonly" : true, "output" : true }
                ],
                "info"  : "Your last exercise on logical functions is to define a very similar function to the previous one, except this time there are 4 arguments. How can you use the function created last time to help define this one? How is the similar to the solution you came up with for the last one? How would this extend to more than 4 inputs? In the next section we are going to look at generalising this pattern."
            }],
        "functions" : ["if", "equals", "true", "false" ]
    }, {
    "name"      : "Introduction to Strings",
    "category"  : "Strings",
    "editors"   : [{
        "name"  : "is empty string",
        "map"   : { "inputs" : { "str" : {} }, "functions" : { } },
        "tests" : [
            { "inputs" : { "str" : ""}, "readonly" : true, "output" : true },
            { "inputs" : { "str" : "a"}, "readonly" : true, "output" : false },
            { "inputs" : { "str" : "empty string!"}, "readonly" : true, "output" : false },
            { "inputs" : { "str" : " "}, "readonly" : true, "output" : false }
        ],
        "info"  : "You'll see for this set of exercises we've made a bunch of functions from the previous exercises available to you. You'll also notice some new functions in the String category. These are all operations over strings of characters. We have the join function, which takes two strings and joins them together to form a longer string, the length function, which returns the length of a string, and the take and drop functions, which either take the first n characters of a string, or remove them. To get started, let's create a convenience function for deciding if a string is the empty string. The empty string always has length 0."
    }, {
        "name"  : "zeroes",
        "map"   : { "inputs" : { "n" : {} }, "functions" : { } },
        "tests" : [
            { "inputs" : { "n" : 6}, "readonly" : true, "output" : "000000" },
            { "inputs" : { "n" : 0}, "readonly" : true, "output" : "" },
            { "inputs" : { "n" : -1}, "readonly" : true, "output" : "" },
            { "inputs" : { "n" : 20}, "readonly" : true, "output" : "00000000000000000000" }
        ],
        "info"  : "For this task, write a recursive function which returns a string consisting of n zeroes. If n is negative, return the empty string."
    }, {
        "name"  : "padTo",
        "map"   : { "inputs" : { "str" : {}, "n" : {} }, "functions" : { } },
        "tests" : [
            { "inputs" : { "str" : "Hello World", "n" : 8}, "readonly" : true, "output" : "Hello Wo" },
            { "inputs" : { "str" : "Wow!", "n" : 8}, "readonly" : true, "output" : "Wow!0000" },
            { "inputs" : { "str" : "You owe me £1", "n" : 16}, "readonly" : true, "output" : "You owe me £1000" },
            { "inputs" : { "str" : "Awesome", "n" : 4}, "readonly" : true, "output" : "Awes" }
        ],
        "info"  : "This is a function which takes a string str and a length n. If the string is longer than n in length, we wish to trucate it down to only n characters. On the otherhand, if it is too short, we wish to pad the string out with zeroes to make the string exactly n characters long. Have a look at the tests in the run dialog for a few examples. "
    }],
    "functions" : ["number", "multiply", "if", "equals", "minus", "plus", "less than", "greater than", "true", "false", "and", "or", "not", "successor", "predecessor", "is zero", "string", "join", "length", "drop", "take" ]
},{             "name"      : "Recursion",
                "category"  : "Basics",
                "editors"   : [
                    {
                        "name"  : "factorial",
                        "map"   : { "inputs" : { "n" : {}}, "functions":{
                            "e8c7e675-8826-41c5-ab9a-6b9cdf6f613d":{
                                "function":"factorial",
                                "y":400,
                                "x":400,
                                "name":"e8c7e675-8826-41c5-ab9a-6b9cdf6f613d",
                                "inputs":{
                                    "n":{
                                        "wired":"67d14b6d-a466-4b82-a2f3-ba70b4aec5c7"
                                    }
                                },
                                "output":{}
                            },
                            "67d14b6d-a466-4b82-a2f3-ba70b4aec5c7":{
                                "function":"predecessor",
                                "y":400,
                                "x":212,
                                "name":"67d14b6d-a466-4b82-a2f3-ba70b4aec5c7",
                                "inputs":{
                                    "a":{
                                        "wired":"n"
                                    }
                                },
                                "output":{}
                            },
                            "39857bbd-3b56-4caa-8be7-ef14d98d7772":{
                                "function":"if",
                                "y":200,
                                "x":700,
                                "name":"39857bbd-3b56-4caa-8be7-ef14d98d7772",
                                "inputs":{
                                    "test":{
                                        "wired":"3d9c8586-1e6a-4348-a1ca-797693726603"
                                    },
                                    "then":{
                                        "wired":"c6c46ac2-d9cc-4477-82b4-973e4fac1b12"
                                    },
                                    "else":{}
                                },
                                "output":{}
                            },
                            "3d9c8586-1e6a-4348-a1ca-797693726603":{
                                "function":"is zero",
                                "y":150,
                                "x":255,
                                "name":"3d9c8586-1e6a-4348-a1ca-797693726603",
                                "inputs":{
                                    "a":{
                                        "wired":"n"
                                    }
                                },
                                "output":{}
                            },
                            "c6c46ac2-d9cc-4477-82b4-973e4fac1b12":{
                                "function":"number",
                                "y":200,
                                "x":256,
                                "name":"c6c46ac2-d9cc-4477-82b4-973e4fac1b12",
                                "inputs":{},
                                "arg":"1",
                                "output":{}
                            }
                        },
                            "output":"39857bbd-3b56-4caa-8be7-ef14d98d7772" },
                        "tests" : [
                            { "inputs" : { "n" : 5}, "readonly" : true, "output" : 120 },
                            { "inputs" : { "n" : 7}, "readonly" : true, "output" : 5040 },
                            { "inputs" : { "n" : 12}, "readonly" : true, "output" : 479001600 },
                            { "inputs" : { "n" : 0}, "readonly" : true, "output" : 1 }
                        ],
                        "info"  : "We are going to define a recursive function. This simply means that the function is defined in terms of itself, meaning at some point during the function we will use the factorial function itself. The factorial function applied to a number n, usually written as n!, is defined as 1 when n is equal to 0, otherwise it is defined as n multiplied by (n-1)!. So for example, 5! is equal to 5&times;(4!), which in turn is equal to 5&times;4&times;(3!), and so on until we reach 5&times;4&times;3&times;2&times;1&times;(0!). Since we defined 0! as 1, this is just 5&times;4&times;3&times;2&times;1&times;1 which is 120. For more examples, take a look at the tests in the run dialog. As you can see, we have already started defining this function for you. So far, we have defined the base case, where n is equal to 0. All you need to do is finish defining the recursive case n&times;(n-1)! You should only need one more function!"
                    },
                    {
                        "name"  : "modulo",
                        "map"   : { "inputs" : { "x" : {}, "y" : {} }, "functions" : { }},
                        "tests" : [
                            { "inputs" : { "x" : 7, "y" : 2}, "readonly" : true, "output" : 1 },
                            { "inputs" : { "x" : 7, "y" : 7}, "readonly" : true, "output" : 0 },
                            { "inputs" : { "x" : 7, "y" : 8}, "readonly" : true, "output" : 7 },
                            { "inputs" : { "x" : 42, "y" : 3}, "readonly" : true, "output" : 0 },
                            { "inputs" : { "x" : 143, "y" : 8}, "readonly" : true, "output" : 7 }
                        ],
                        "info"  : "We are going to define another recursive function. This is called the modulo operation which given two numbers finds the remainder when the first is divided by the second. For example modulo applied to 7 and 2 is the remainer when 7 is divided by 2, which is 1. For more examples, take a look at the tests in the run dialog. We can describe this informally by saying that if x is less than y, the result is simply x. Otherwise, x is divisible by y at least once, so we can say that modulo of x and y is equal to the modulo of x-y and y. We haven't given you any more help this time, but we will say that the structure will look similar to the previous task."
                    },
                    {
                        "name"  : "gcd",
                        "map"   : { "inputs" : { "a" : {}, "b" : {} }, "functions" : { }},
                        "tests" : [
                            { "inputs" : { "a" : 100, "b" : 200}, "readonly" : true, "output" : 100 },
                            { "inputs" : { "a" : 93, "b" : 28}, "readonly" : true, "output" : 1 },
                            { "inputs" : { "a" : 684, "b" : 868}, "readonly" : true, "output" : 4 },
                            { "inputs" : { "a" : 9863, "b" : 1001}, "readonly" : true, "output" : 7 },
                            { "inputs" : { "a" : 2202, "b" : 2569}, "readonly" : true, "output" : 367 },
                            { "inputs" : { "a" : 2202, "b" : 0}, "readonly" : true, "output" : 2202 },
                            { "inputs" : { "a" : 0, "b" : 2569}, "readonly" : true, "output" : 2569 }
                        ],
                        "info"  : "Finally, lets define euclids algorithm. This algorithm computes the greatest common divisor of two numbers, that is, we wish to return the largest number which divides both inputs to this function. There are many ways to define this function, however the simplest is to use the modulo function defined in the previous task. We can say that the greates common divisor of any number a and 0 is a, since everything divides 0. Furthermore, the greatest common divisor of a and b is the greatest common divisor of b and the modulo of a and b. Can you see why? And can you translate this into a visual functional program?"
                    }
        ],
    "functions" : ["number", "multiply", "if", "equals", "minus", "plus", "less than", "greater than", "true", "false", "and", "or", "not", "successor", "predecessor", "is zero", "string", "join", "length", "drop", "take" ]
    }
]